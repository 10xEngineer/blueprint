blueprint(7) -- Blueprint Python library
========================================

## SYNPOSIS

	import blueprint

	b = blueprint.Blueprint(name='foo', create=True)
	b.commit()

	b.puppet().dumpf(gzip=True)
	b.chef().dumpf(gzip=True)
	b.sh().dumpf(gzip=True)

## DESCRIPTION

### blueprint.Blueprint

The `blueprint.Blueprint` class manages blueprints stored in the local blueprint repository using the `git`(1) tools.  New blueprints are created by passing the `create=True` keyword argument to `blueprint.Blueprint`.  Previously committed blueprints are referenced by passing the `name=`_name_ keyword argument and optionally `commit=`_commit_.

`blueprint.Blueprint` objects may be subtracted from one another.

`blueprint.Blueprint` objects support the following properties:

* `arch`:
  The architecture of the system that created the blueprint.  Only present if the blueprint contains source tarballs.
* `files`:
  A dictionary that maps path names to file properties.  Each object contains `content`, `encoding`, `group`, `mode`, and `owner`.
* `managers`:
  A computed dictionary of each package manager mapped to its package manager.  Useful for reversing the algorithm described in `blueprint`(5).
* `name`:
  This blueprint's name.
* `packages`:
  A dictionary of package managers that map to dictionaries of managed packages mapped to a list of version numbers to be installed.
* `services`:
  A dictionary of service managers that map to dictionaries of managed services mapped to resources on which the service depends.
* `sources`:
  A dictionary that maps directory names to the name of the tarball that contains the files to be extracted there.

`dumps()` serializes and returns the blueprint as JSON.

`commit(message=`_''_`)` records a new revision of this blueprint, optionally with _message_ as its Git commit message.

`puppet()`, `chef()`, `sh()` return `Manifest`, `Cookbook`, and `Script` objects, respectively.  See the next section.

`walk()` is a generic implementation of the algorithm described in `blueprint`(5) which accepts callbacks as keyword arguments:

* `before_sources():`
  Executed before source tarballs are enumerated.
* `source(dirname, filename, gen_content):`
  Executed when a source tarball is enumerated.  `gen_content` is a callable that will return the file's contents.
* `after_sources():`
  Executed after source tarballs are enumerated.
* `before_files():`
  Executed before files are enumerated.
* `file(pathname, f):`
  Executed when a file is enumerated.
* `after_files():`
  Executed after files are enumerated.
* `before_packages(manager):`
  Executed before a package manager's dependencies are enumerated.
* `package(manager, package, version):`
  Executed when a package version is enumerated.
* `after_packages(manager):`
  Executed after a package manager's dependencies are enumerated.
* `before_services(manager):`
  Executed before a service manager's dependencies are enumerated.
* `service(manager, service, deps):`
  Executed when a service is enumerated.
* `service_file(managername, service, pathname):`
  Executed when a file dependency is enumerated.
* `service_package(managername, service, package_managername, package):`
  Executed when a package dependency is enumerated.
* `service_source(managername, service, dirname):`
  Executed when a source tarball dependency is enumerated.
* `after_services(manager):`
  Executed after a service manager's dependencies are enumerated.

The `blueprint.Blueprint` class (not individual instances) supports `destroy(`_name_`)` to destroy a blueprint and `iter()` to iterate over the names of blueprints.

### blueprint.frontend

`blueprint.frontend.puppet.Manifest`, `blueprint.frontend.chef.Cookbook`, and `blueprint.frontend.sh.Script` all implement similar interfaces to code generation.

`blueprint.frontend.puppet.puppet`, `blueprint.frontend.chef.chef`, and `blueprint.frontend.sh.sh` all accept a `blueprint.Blueprint` as their argument and return one of the above types, which have the following methods.

`dumps()` returns a string containing code in the language implemented by the class that received the call.  If the blueprint contains source tarballs, `dumps()` may raise `ValueError`.

`dumpf(gzip=`_False_`)` returns the name of a file, possibly in a newly-created directory, containing code in the language implemented by the class that received the call.  The file or directory is created in the current working directory.  If `gzip=`_True_, the file or directory will compressed and the resulting tarball will be left in the current working directory.

### blueprint.manager

The `blueprint.manager.Manager` class is a `dict` subclass that is used as the value associated with each package manager name.  It is a callable that can translate package names and versions into shell commands for installing the package.  For example: `blueprint.manager.Manager(`_'apt'_`)(`_'python'_`, `_'2.6.6-2ubuntu1'_`)`.

### blueprint.backend

The `blueprint.backend` module implements `blueprint-create`(1).  Each module within (for example, `blueprint.backend.apt`) must contain a function by the same name (in the example, `blueprint.backend.apt.apt`) which accepts a `blueprint.Blueprint` object as its only argument.  When `blueprint.backend` is imported, it finds all such functions, lists them in `blueprint.backend.__all__`, and imports the function.  Use the backend functions thus:

	import blueprint
	import blueprint.backend
	b = blueprint.Blueprint(name='foo')
	for funcname in blueprint.backend.__all__:
	    getattr(blueprint.backend, funcname)(b)

### blueprint.git

The `blueprint.git` module exposes the `git`(1) tools to Python via the standard `subprocess` module.  `blueprint.git.git` is a direct proxy to running arbitrary Git commands.  Several commands have been wrapped specially to expose their results:

* `blueprint.git.rev_parse(`_refname_`)`:
  Return the commit associated with _refname_.
* `blueprint.git.tree(`_commit_`)`:
  Return the tree SHA associated with _commit_.
* `blueprint.git.ls_tree(`_tree_`)`:
  Generate the mode, type, SHA, and relative pathname of each file in _tree_ recursively.
* `blueprint.git.blob(`_tree_`, `_pathname_`)`:
  Return the blob SHA associated with _pathname_ in _tree_.
* `blueprint.git.content(`_blob_`)`:
  Return the contents of _blob_.
* `blueprint.git.write_tree()`:
  Return the tree that results from writing the current index to the object store.
* `blueprint.git.commit_tree(`_tree_`, `_message_`, `_parent_`)`:
  Return the commit for _tree_ and _parent_ with _message_.

### blueprint.context_managers

The `blueprint.context_managers` module implements context managers used throughout `blueprint`(1).

* `blueprint.context_managers.cd(`_new\_cwd_`)`:
  Execute in a different working directory.  The property `old_cwd` is available on the context object containing the previous working directory.
* `blueprint.context_managers.mkdtemp(dir=`_None_`)`:
  Create a temporary directory and execute with it as the working directory.  The property `cwd` is available on the context object containing the previous working directory.  When the context closes, the temporary directory and all its contents are removed recursively.

## FILES

* `~/.blueprints.git`:
  The local repsitory where blueprints are stored, each on its own branch.

## THEME SONG

The Flaming Lips - "The W.A.N.D. (The Will Always Negates Defeat)"

## AUTHOR

Richard Crowley <richard@devstructure.com>

## SEE ALSO

Part of `blueprint`(1).
